import streamlit as st
import pandas as pd
import numpy as np
from tensorflow import keras
from sklearn.preprocessing import MinMaxScaler
import joblib
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(page_title="D·ª± ƒêo√°n B·ªánh Tim", page_icon="‚ù§Ô∏è", layout="centered")

# Load m√¥ h√¨nh v√† scaler
@st.cache_resource
def load_model():
    return keras.models.load_model("heart_disease_model.h5")

@st.cache_resource
def load_scaler():
    return joblib.load("scaler.pkl")

mo_hinh = load_model()
scaler = load_scaler()

# Danh s√°ch c·ªôt ƒë·∫ßu v√†o
features = ['id', 'age', 'sex', 'dataset', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 
            'thalch', 'exang', 'oldpeak', 'slope', 'ca', 'thal']

# Giao di·ªán ng∆∞·ªùi d√πng
st.subheader("NH√ìM 1: P.Nam, H.Nam, P.Huy, T.Ti·∫øn")
st.title("üîç ·ª®ng d·ª•ng D·ª± ƒêo√°n B·ªánh Tim")
st.markdown("### **Nh·∫≠p th√¥ng tin ƒë·ªÉ ki·ªÉm tra nguy c∆° m·∫Øc b·ªánh tim** üè•")

# B·ªë c·ª•c giao di·ªán
with st.container():
    st.subheader("üìã Nh·∫≠p th√¥ng tin b·ªánh nh√¢n:")
    age = st.slider("Tu·ªïi", 1, 150, 50)
    sex = st.radio("Gi·ªõi t√≠nh", ["Nam", "N·ªØ"], horizontal=True)
    cp = st.selectbox("Lo·∫°i ƒëau ng·ª±c", [0, 1, 2, 3])
    trestbps = st.slider("Huy·∫øt √°p khi ngh·ªâ (mm Hg)", 80, 200, 120)
    chol = st.slider("Cholesterol (mg/dl)", 100, 600, 200)
    fbs = st.radio("ƒê∆∞·ªùng huy·∫øt > 120 mg/dl", [0, 1], horizontal=True)
    restecg = st.selectbox("K·∫øt qu·∫£ ECG khi ngh·ªâ", [0, 1, 2])
    thalch = st.slider("Nh·ªãp tim t·ªëi ƒëa ƒë·∫°t ƒë∆∞·ª£c", 70, 220, 150)
    exang = st.radio("ƒêau th·∫Øt ng·ª±c khi t·∫≠p kh√¥ng?", [0, 1], horizontal=True)
    oldpeak = st.slider("Ch√™nh ST do t·∫≠p th·ªÉ d·ª•c", 0.0, 6.2, 1.0, step=0.1)
    slope = st.selectbox("ƒê·ªô d·ªëc c·ªßa ƒëo·∫°n ST", [0, 1, 2])
    ca = st.slider("S·ªë l∆∞·ª£ng m·∫°ch ch√≠nh c√≥ c·∫£n tr·ªü (0-4)", 0, 4, 1)
    thal = st.selectbox("Thalassemia", [3, 6, 7])

# D·ª± ƒëo√°n k·∫øt qu·∫£
if st.button("üìå D·ª± ƒëo√°n ngay"):
    with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
        sex_numeric = 1 if sex == "Nam" else 0
        input_data = pd.DataFrame([[0, age, sex_numeric, 0, cp, trestbps, chol, fbs, restecg, 
                                    thalch, exang, oldpeak, slope, ca, thal]], columns=features)
        input_data[['thalch', 'chol', 'trestbps', 'ca']] = scaler.transform(input_data[['thalch', 'chol', 'trestbps', 'ca']])
        prediction = mo_hinh.predict(input_data)
        risk = prediction.flatten()[0]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.markdown("---")
    st.subheader("üîπ K·∫øt qu·∫£ D·ª± ƒêo√°n")
    if risk > 0.5:
        st.error(f"‚ö†Ô∏è **Nguy c∆° m·∫Øc b·ªánh tim: {risk:.2%}**")
    else:
        st.success(f"‚úÖ **Kh√¥ng c√≥ nguy c∆° m·∫Øc b·ªánh tim: {risk:.2%}**")
    
    # Bi·ªÉu ƒë·ªì tr·ª±c quan
    st.markdown("#### üìä Ph√¢n t√≠ch nguy c∆°")
    
    # Bi·ªÉu ƒë·ªì gauge
    fig1 = go.Figure(go.Indicator(
        mode="gauge+number",
        value=risk * 100,
        title={"text": "Nguy c∆° m·∫Øc b·ªánh tim (%)"},
        gauge={"axis": {"range": [0, 100]},
               "bar": {"color": "red"},
               "steps": [{"range": [0, 50], "color": "grey"},
                          {"range": [50, 100], "color": "grey"}]}
    ))
    st.plotly_chart(fig1, use_container_width=True)
    
    # Bi·ªÉu ƒë·ªì c·ªôt
    fig2, ax = plt.subplots()
    ax.bar(["An to√†n", "Nguy c∆°"], [1-risk, risk], color=["green", "black"])
    ax.set_ylabel("X√°c su·∫•t")
    ax.set_title("So s√°nh m·ª©c ƒë·ªô nguy c∆°")
    st.pyplot(fig2)
    
    # Bi·ªÉu ƒë·ªì tr√≤n
    labels = ["Kh√¥ng m·∫Øc b·ªánh", "M·∫Øc b·ªánh"]
    values = [1-risk, risk]
    fig3 = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.4)])
    fig3.update_traces(marker=dict(colors=["green", "purple"]))
    st.plotly_chart(fig3, use_container_width=True)
    